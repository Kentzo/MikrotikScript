# [PackageDev] target_format: plist, ext: tmLanguage
---
name: Mikrotik Script
scopeName: source.mikrotik-script
fileTypes: [rsc]
uuid: 1a4e4c34-d9fb-4371-b819-9934ebed400c

patterns:
- include: '#literal-string'
- include: '#comments'
- include: '#parameters'
- include: '#literal-constants'
- include: '#literal-boolean'
- include: '#literal-ip'
- include: '#literal-mac'
- include: '#literal-date'
- include: '#literal-number'
- include: '#variable'
- include: '#variable-definition'
- include: '#control-flow'
# - include: '#commands'
# - include: '#functions'
- include: '#operators'
- include: '#line-continuation'

repository:
  literal-string:
    patterns:
    - name: string.quoted.double.mikrotik-script
      begin: '"'
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.mikrotik-script}
      end: '"'
      endCaptures:
        '0': {name: punctuation.definition.string.end.mikrotik-script}
      patterns:
      - include: '#string-escape'
      - include: '#string-expression'
      - include: '#line-continuation'
      - name: invalid.illegal.newline.mikrotik-script
        match: \n

  comments:
    patterns:
    - name: comment.line.number-sign.mikrotik-script
      match: ^(#).*$\n?
      captures:
        '1': {name: punctuation.definition.comment.mikrotik-script}
      comment: comments are ignored by syntax

    - match: (#.*)$\n?
      captures:
        '1': {name: invalid.illegal.unexpected-comment.mikrotik-script}

  parameters:
    patterns:
    - contentName: meta.parameters.add_default_route.mikrotik-script
      begin: (add-default-route)(=)((\\)\n)*
      beginCaptures:
        '1': {name: entity.other.attribute-name.mikrotik-script}
        '2': {name: keyword.operator.assigment.mikrotik-script}
        '4': {name: punctuation.separator.continuation.line.mikrotik-script}
      end: (\n|\t|\s)
      patterns:
      - name: support.constant.mikrotik-script
        match: (yes|no|special-classless)

      - name: invalid.illegal.unexpected-value.mikrotik-script
        match: .*

  literal-constants:
    patterns:
    - name: support.constant.mikrotik-script
      match: \b(yes|no|none|wpa-psk|wpa2-psk|dynamic-keys|special-classless)\b
      comment: constants used by various parameters

  literal-boolean:
    patterns:
    - name: constant.language.mikrotik-script
      match: \b(true|false)\b
      comment: boolean

  literal-ip:
    patterns:
    - name: constant.other.ipv6.mikrotik-script
      match: \b((\h{1,4}\:){7}\h{1,4}|(\h{1,4}\:){1,7}\:|(\h{1,4}\:){1,6}\:\h{1,4}|(\h{1,4}\:){1,5}(\:\h{1,4}){1,2}|(\h{1,4}\:){1,4}(\:\h{1,4}){1,3}|(\h{1,4}\:){1,3}(\:\h{1,4}){1,4}|(\h{1,4}\:){1,2}(\:\h{1,4}){1,5}|\h{1,4}\:((\:\h{1,4}){1,6})|\:((\:\h{1,4}){1,7}|\:)|fe80\:(\:\h{,4}){,4}\%[0-9a-zA-Z]{1,}|\:\:(ffff(\:0{1,4})?\:)?((25[0-5]|(2[0-4]|1?[0-9])?[0-9]).){3}(25[0-5]|(2[0-4]|1?[0-9])?[0-9])|(\h{1,4}\:){1,4}\:((25[0-5]|(2[0-4]|1?[0-9])?[0-9]).){3}(25[0-5]|(2[0-4]|1?[0-9])?[0-9]))\b
      comment: IPv6 address, zero compressed IPv6 addresses, link-local IPv6 addresses with zone index, IPv4-Embedded IPv6 Address, IPv4-mapped IPv6 addresses, IPv4-translated addresses (http://stackoverflow.com/a/17871737/188530)

    - name: constant.other.ipv4.mikrotik-script
      match: \b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\/([0-9]|1[0-9]|2[0-4]))?\b
      comment: IPv4 address (http://stackoverflow.com/a/5284179/188530)

  literal-mac:
    patterns:
    - name: constant.other.mac.mikrotik-script
      match: \b(\h{2}[:-]){5}(\h{2})\b
      comment: MAC address (http://stackoverflow.com/a/4260512/188530)

  literal-date:
    patterns:
    - name: constant.other.time.mikrotik-script
      match: \b([1-9]+[0-9]*|0)(ms|s|m|h|d|w)\b
      comment: 1s, 2m, 3h, 4d

    - name: constant.other.time.mikrotik-script
      match: \b(([1-9]+[0-9]*w)?([1-9]+[0-9]*d)?([0-9]{2}:[0-9]{2}:[0-9]{2}))\b
      comment: 1w5d12:20:59

    - name: constant.other.date.mikrotik-script
      match: \b((jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)\/[0-9]{2}\/[1-9]+[0-9]*)\b

    - name: constant.other.time.delta.mikrotik-script
      match: ([\+\-]?[0-9]{2}:[0-9]{2})

  literal-number:
    patterns:
    - name: constant.numeric.integer.hexadecimal.mikrotik-script
      match: \b(?i:(0x\h*))\b
      comment: 64bit signed integer in hexadecimal form

    - name: constant.numeric.integer.decimal.mikrotik-script
      match: \b([1-9]+[0-9]*|0)\b
      comment: 64bit signed integer in decimal form

  variable:
    patterns:
    - name: variable.other.mikrotik-script
      match: (\$)([0-9a-zA-Z]+)
      captures:
        '1': {name: punctuation.definition.variable.mikrotik-script}

    - name: variable.other.mikrotik-script
      begin: (\$)(\")
      beginCaptures:
        '1': {name: punctuation.definition.variable.mikrotik-script}
        '2': {name: punctuation.definition.variable.begin.mikrotik-script}
      end: \"
      endCaptures:
        '0': {name: punctuation.definition.variable.end.mikrotik-script}
      patterns:
      - include: '#string-escape'

      - include: '#line-continuation'

      - name: invalid.illegal.newline.mikrotik-script
        match: \n

  variable-definition:
    patterns:
    - match: (\:)(global|local)\b
      captures:
        '1': {name: keyword.operator.other.mikrotik-script}
        '2': {name: storage.modifier.mikrotik-script}

  control-flow:
    patterns:
    - match: \b(from|to|step|in|do|else|while)\b([\s|\t]*)(=)
      captures:
        '1': {name: keyword.control.flow.mikrotik-script}
        '2': {name: invalid.illegal.whitespace.mikrotik-script}
        '3': {name: keyword.operator.comparison.mikrotik-script}

    - name: keyword.control.flow.mikrotik-script
      match: \b(while|for|foreach|on-error|if|do)\b

  # commands:
  #   patterns:
  #   - match: (\:)\b(global|local)\s([0-9a-zA-Z]+|\".*\")\b
  #     captures:
  #       '1': {name: keyword.operator.other.mikrotik-script}
  #       '2': {name: storage.modifier.mikrotik-script}
  #       '3': {name: variable.other.mikrotik-script}

  #   - match: (\:)\b(beep|delay|put|len|typeof|pick|log|time|set|find|environment|terminal|error|parse|resolve|toarray|tobool|toid|toip|toip6|tonum|tostr|totime)\b
  #     captures:
  #       '1': {name: keyword.operator.other.mikrotik-script}
  #       '2': {name: support.function.mikrotik-script}

  #   - match: (\:)\b(add|remove|enable|disable|set|get|print|export|edit|find)\b
  #     captures:
  #       '1': {name: keyword.operator.other.mikrotik-script}
  #       '2': {name: support.function.mikrotik-script}

  # functions:
  #   patterns:
  #   - name: support.function.log.mikrotik-script
  #     begin: ":"
  #     end: ";"
  #     patterns:
  #     - include: '$self'

  operators:
    patterns:
    - name: keyword.operator.arithmetic.mikrotik-script
      match: \+|\-|\*|\/
      comment: arithmetic operators

    - name: keyword.operator.relational.mikrotik-script
      match: <|>|<=|>=
      comment: relational operators

    - name: keyword.operator.comparison.mikrotik-script
      match: =|!=
      comment: comparison operators

    - name: keyword.operator.logical.mikrotik-script
      match: \!|&&|\|\|
      comment: logical operators

    - name: keyword.operator.bitwise.mikrotik-script
      match: ~|\||\^|\&|<<|>>
      comment: bitwise operators

    - name: keyword.operator.concatenation.mikrotik-script
      match: \.|\,
      comment: concatenation operators

    - name: keyword.operator.other.mikrotik-script
      match: ->
      comment: access array element by key

    - name: keyword.operator.other.mikrotik-script
      match: :|\$|\/
      comment: delimeters

    - name: punctuation.terminator.statement.mikrotik-script
      match: ;

    - name: meta.brace.round.mikrotik-script
      match: \(|\)

    - name: meta.brace.curly.mikrotik-script
      match: \{|\}

    - name: meta.brace.square.mikrotik-script
      match: \[|\]

  string-escape:
    patterns:
    - name: constant.character.escape.mikrotik-script
      match: \\\"|\\\\|\\n|\\r|\\t|\\\$|\\\?|\\_|\\a|\\b|\\f|\\v|\\\h\h

  string-expression:
    patterns:
    - begin: \$\(
      end: \)
      patterns:
      - include: '$self'
      - include: '#line-continuation'
      - name: invalid.illegal.newline.mikrotik-script
        match: \n

    - begin: \$\[
      end: \]
      patterns:
      - include: '$self'
      - include: '#line-continuation'
      - name: invalid.illegal.newline.mikrotik-script
        match: \n

  line-continuation:
    patterns:
    - match: (\\)(.*)$\n?
      captures:
        '1': {name: punctuation.separator.continuation.line.mikrotik-script}
        '2': {name: invalid.illegal.unexpected-text.mikrotik-script}
